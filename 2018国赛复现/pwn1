又是一道选单程序，审了一些反编译后的代码整理后发现是一个购买任务类的程序，商品的名字，价格，以及描述信息的大小以及内容都是由你来指定的，主要功能也就是add，del，list，以及changeprice，changedesc；add功能主要是动态分配一个32字节大小的内存块（取整），前16字节用来存商品名字，后16字节中前面四个字节存放价格，之后四个字节存放描述信息的size大小，之后四个字节指向申请的存放描述信息的堆空间。del负责删除商品节点的信息。list函数负责遍历节点输出商品的价格和描述信息。然后changeprice和changedesc分别是修改商品价格和描述信息。嗯呐就是这样，由于时间比较紧急，马上就要打铁三了，得加快刷题进度，所以这里就不做太多分析直接讲漏洞了。ermmmm这道题的漏洞主要是在changedesc函数中，当修改描述信息的时候，程序允许用户重新给描述信息分配内存，之后根据一开始定义的size大小录入描述信息。如果输入的要分配的内存与当前分配的内存大小不同，就重新分配输入大小的内存，之后重新输入描述信息，否则话直接重新录入描述信息。这里的主要问题在于程序重新分配空间之后没有重新给商品节点中描述信息大小（size）重新赋值，如果一开始分配的内存空间很大，修改的时候又输入一个更小的内存空间而没有修改size大小，之后再次进行修改的时候就很容易产生溢出，利用list函数最终能导致任意地址读写。主要利用思路如下：利用程序没有检查size大小的漏洞构造堆溢出，覆盖前32字节中指向描述信息的指针后使用list函数泄露出函数地址，根据泄露出的地址找到服务器上程序使用的libc版本，之后再次使用changedesc函数利用dwordshoot（前32字节中指向描述信息的指针被选定的函数got地址覆盖）覆写got表（atoi，strlen之类的）为system函数地址，之后直接发送/bin/sh就可以构造system('/bin/sh')拿到shell.附件里放上了脚本。